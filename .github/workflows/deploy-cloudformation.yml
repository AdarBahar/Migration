name: 🚀 Deploy CloudFormation Template to S3

on:
  push:
    branches: [ main ]
    paths:
      - 'migration-instance.yaml'
  pull_request:
    branches: [ main ]
    paths:
      - 'migration-instance.yaml'

env:
  S3_BUCKET: ${{ secrets.S3_BUCKET_NAME }}
  AWS_REGION: ${{ secrets.AWS_REGION || 'us-east-1' }}

jobs:
  deploy-template:
    name: 📤 Deploy CloudFormation Template
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🔧 Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: ✅ Validate CloudFormation Template
      run: |
        echo "🔍 Validating CloudFormation template..."
        aws cloudformation validate-template \
          --template-body file://migration-instance.yaml \
          --region ${{ env.AWS_REGION }}
        echo "✅ Template validation successful!"
        
    - name: 📊 Template Information
      run: |
        echo "📋 CloudFormation Template Details:"
        echo "  📁 File: migration-instance.yaml"
        echo "  📏 Size: $(stat -c%s migration-instance.yaml) bytes"
        echo "  🕒 Modified: $(stat -c%y migration-instance.yaml)"
        echo "  🔗 Target S3: s3://${{ env.S3_BUCKET }}/migration-instance.yaml"
        echo "  🌍 Region: ${{ env.AWS_REGION }}"
        
    - name: 📤 Upload to S3
      run: |
        echo "🚀 Uploading CloudFormation template to S3..."
        
        # Upload the template with metadata
        aws s3 cp migration-instance.yaml \
          s3://${{ env.S3_BUCKET }}/migration-instance.yaml \
          --metadata "version=${{ github.sha }},updated=$(date -u +%Y-%m-%dT%H:%M:%SZ),branch=${{ github.ref_name }}" \
          --content-type "text/yaml" \
          --cache-control "no-cache" \
          --region ${{ env.AWS_REGION }}
          
        echo "✅ Template uploaded successfully!"
        
    - name: 🔗 Generate Secure URLs
      run: |
        echo "📍 CloudFormation Template URLs (Secure Access):"
        echo ""

        # Generate pre-signed URL (30 days for longer validity)
        echo "🔒 Generating secure pre-signed URL (valid for 30 days)..."
        PRESIGNED_URL=$(aws s3 presign s3://${{ env.S3_BUCKET }}/migration-instance.yaml --expires-in 2592000 --region ${{ env.AWS_REGION }})
        echo "   ✅ 30-day pre-signed URL generated successfully"
        echo ""

        # Generate one-click deploy URL with pre-signed URL
        echo "🚀 Generating one-click deploy URL (30-day expiry)..."
        ENCODED_URL=$(echo "$PRESIGNED_URL" | sed 's/:/%3A/g; s/\//%2F/g; s/&/%26/g; s/=/%3D/g; s/?/%3F/g')
        echo "   ✅ One-click deploy URL generated successfully"
        echo ""

        # Generate shorter-term URL for immediate use
        echo "🕐 Generating short-term URL (valid for 24 hours)..."
        SHORT_PRESIGNED_URL=$(aws s3 presign s3://${{ env.S3_BUCKET }}/migration-instance.yaml --expires-in 86400 --region ${{ env.AWS_REGION }})
        echo "   ✅ 24-hour pre-signed URL generated successfully"
        echo ""

        # Save URLs to environment for later steps (not logged)
        echo "PRESIGNED_URL_30D=$PRESIGNED_URL" >> $GITHUB_ENV
        echo "PRESIGNED_URL_24H=$SHORT_PRESIGNED_URL" >> $GITHUB_ENV

        echo "✅ Secure access configured - no public bucket policy required"
        echo "🔐 All access is controlled via pre-signed URLs with expiration"
        echo ""
        
    - name: 📝 Update Deployment Log
      run: |
        echo "📝 Creating deployment log..."
        cat > deployment-log.json << EOF
        {
          "deployment": {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commit_sha": "${{ github.sha }}",
            "commit_message": "${{ github.event.head_commit.message }}",
            "branch": "${{ github.ref_name }}",
            "actor": "${{ github.actor }}",
            "s3_bucket": "${{ env.S3_BUCKET }}",
            "aws_region": "${{ env.AWS_REGION }}",
            "template_size": $(stat -c%s migration-instance.yaml),
            "access_method": "pre-signed-urls",
            "security_level": "private-bucket",
            "presigned_url_30d_generated": true,
            "presigned_url_24h_generated": true,
            "url_expiry_30d": "$(date -u -d '+30 days' +%Y-%m-%dT%H:%M:%SZ)",
            "url_expiry_24h": "$(date -u -d '+1 day' +%Y-%m-%dT%H:%M:%SZ)"
          }
        }
        EOF
        
        # Upload deployment log
        aws s3 cp deployment-log.json \
          s3://${{ env.S3_BUCKET }}/deployment-logs/$(date +%Y%m%d-%H%M%S)-${{ github.sha }}.json \
          --content-type "application/json" \
          --region ${{ env.AWS_REGION }}
          
        echo "✅ Deployment log saved to S3"

    - name: 📋 Create Secure URL File
      run: |
        echo "📋 Creating secure URL file for download..."
        cat > secure-urls.txt << EOF
        🔒 Redis Migration CloudFormation Template - Secure Access URLs
        Generated: $(date -u +%Y-%m-%dT%H:%M:%SZ)
        Commit: ${{ github.sha }}

        📍 SECURE PRE-SIGNED URLS:

        🔒 30-Day Pre-signed URL (expires $(date -u -d '+30 days' +%Y-%m-%d)):
        ${{ env.PRESIGNED_URL_30D }}

        🕐 24-Hour Pre-signed URL (expires $(date -u -d '+1 day' +%Y-%m-%d)):
        ${{ env.PRESIGNED_URL_24H }}

        🚀 One-Click Deploy URL (30-day expiry):
        https://console.aws.amazon.com/cloudformation/home?region=${{ env.AWS_REGION }}#/stacks/create/review?templateURL=$(echo "${{ env.PRESIGNED_URL_30D }}" | sed 's/:/%3A/g; s/\//%2F/g; s/&/%26/g; s/=/%3D/g; s/?/%3F/g')&stackName=Redis-Migration-Stack

        📝 SECURITY NOTES:
        - These URLs provide time-limited access to the CloudFormation template
        - URLs automatically expire after the specified time period
        - S3 bucket remains private with no public access
        - Use the 30-day URL for sharing, 24-hour URL for immediate deployment

        EOF

        # Upload secure URLs file to S3 (private)
        aws s3 cp secure-urls.txt \
          s3://${{ env.S3_BUCKET }}/deployment-urls/$(date +%Y%m%d-%H%M%S)-${{ github.sha }}-urls.txt \
          --content-type "text/plain" \
          --region ${{ env.AWS_REGION }}

        echo "✅ Secure URLs file uploaded to S3 (private access only)"
        echo "📍 Location: s3://${{ env.S3_BUCKET }}/deployment-urls/$(date +%Y%m%d-%H%M%S)-${{ github.sha }}-urls.txt"

    - name: 🎉 Deployment Summary
      run: |
        echo "🎉 Deployment Complete!"
        echo "================================"
        echo "✅ CloudFormation template validated"
        echo "✅ Template uploaded to private S3 bucket"
        echo "✅ Secure pre-signed URLs generated"
        echo "✅ Deployment log created"
        echo "✅ Secure URLs file uploaded to S3"
        echo ""
        echo "📋 Next Steps:"
        echo "1. Download the secure URLs file from S3 for deployment links"
        echo "2. Use the one-click deploy URL for immediate CloudFormation deployment"
        echo "3. Check deployment logs in S3 for detailed information"
        echo ""
        echo "🔒 Security: All URLs are time-limited and bucket remains private"

  notify-on-failure:
    name: 🚨 Notify on Failure
    runs-on: ubuntu-latest
    needs: deploy-template
    if: failure()
    
    steps:
    - name: 🚨 Deployment Failed
      run: |
        echo "🚨 CloudFormation Template Deployment Failed!"
        echo "=============================================="
        echo "❌ The migration-instance.yaml deployment to S3 failed"
        echo "🔍 Please check the workflow logs for details"
        echo "💡 Common issues:"
        echo "   • AWS credentials not configured"
        echo "   • S3 bucket doesn't exist or no permissions"
        echo "   • CloudFormation template validation failed"
        echo "   • Network connectivity issues"
        echo ""
        echo "🔧 To fix:"
        echo "1. Check GitHub Secrets: AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, S3_BUCKET_NAME"
        echo "2. Verify S3 bucket exists and has proper permissions"
        echo "3. Validate CloudFormation template locally"
        echo "4. Re-run the workflow after fixing issues"

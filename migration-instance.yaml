
AWSTemplateFormatVersion: '2010-09-09'
Description: Provision an EC2 instance for the Migration project with Python and Git pre-configured.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Stack Configuration"
        Parameters:
          - StackName
      - Label:
          default: "Network Configuration"
        Parameters:
          - VpcId
          - SubnetId
          - DefaultSecurityGroupId
          - MyIP
      - Label:
          default: "Instance Configuration"
        Parameters:
          - KeyName
          - InstanceType
          - AmiId

Parameters:
  StackName:
    Type: String
    Default: Redis-Migration-Tool
    Description: >
      Name for this CloudFormation stack.
      📍 This will be used as the stack identifier in AWS Console
    MinLength: 1
    MaxLength: 128
    AllowedPattern: "^[a-zA-Z][-a-zA-Z0-9]*$"
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters and hyphens

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: >
      Name of an existing EC2 Key Pair.
      📍 AWS Console > EC2 > Network & Security > Key Pairs.

  MyIP:
    Type: String
    Description: >
      Your public IP address in CIDR format (e.g., 203.0.113.42/32).
      📍 https://checkip.amazonaws.com
    AllowedPattern: "^([0-9]{1,3}\\.){3}[0-9]{1,3}/32$"
    ConstraintDescription: Must be a valid IPv4 address with /32 CIDR mask

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: >
      The VPC ID where the instance and security group will be deployed.
      📍 AWS Console > VPC > Your VPCs

  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: >
      The Subnet ID where the instance will be launched.
      📍 AWS Console > VPC > Subnets (must belong to the above VPC)

  AmiId:
    Type: AWS::EC2::Image::Id
    Default: ami-042b4708b1d05f512
    Description: >
      Ubuntu AMI ID to use (Ubuntu 22.04 LTS).
      📍 Default: ami-042b4708b1d05f512 (Ubuntu 22.04 LTS in us-east-1)
      📍 AWS Console > EC2 > AMIs (filter by Canonical + Ubuntu)

  DefaultSecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: >
      The default security group ID of the VPC.
      📍 AWS Console > VPC > Security Groups (Group Name: 'default' for your VPC)

  InstanceType:
    Type: String
    Default: t3.micro
    Description: >
      EC2 instance type for the migration instance.
      📍 t3.micro is free tier eligible
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
    ConstraintDescription: Must be a valid EC2 instance type

Resources:
  MigrationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH from MyIP
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref MyIP

  MigrationInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      ImageId: !Ref AmiId
      SubnetId: !Ref SubnetId
      SecurityGroupIds:
        - !Ref MigrationSecurityGroup
        - !Ref DefaultSecurityGroupId
      Tags:
        - Key: Name
          Value: !Sub "${StackName}-Instance"
        - Key: Project
          Value: !Ref StackName
        - Key: Environment
          Value: Development
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Update system
          apt update -y
          apt upgrade -y
          
          # Install required packages
          apt install -y software-properties-common
          add-apt-repository universe -y
          apt update -y
          apt install -y python3 python3-pip python3-venv git curl wget
          
          # Clone and setup Migration project
          cd /home/ubuntu
          git clone https://github.com/AdarBahar/Migration.git
          cd Migration
          
          # Setup Python environment
          python3 -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt
          
          # Set proper ownership
          chown -R ubuntu:ubuntu /home/ubuntu/Migration
          
          # Create a startup script for convenience
          cat > /home/ubuntu/start-migration.sh << 'EOF'
          #!/bin/bash
          cd /home/ubuntu/Migration
          source venv/bin/activate
          echo "🚀 Migration environment ready!"
          echo "Available scripts: DB_compare.py, ReadWriteOps.py, flushDBData.py, manage_env.py, DataFaker.py"
          EOF
          chmod +x /home/ubuntu/start-migration.sh
          chown ubuntu:ubuntu /home/ubuntu/start-migration.sh

Outputs:
  InstancePublicIP:
    Description: Public IP of the EC2 instance
    Value: !GetAtt MigrationInstance.PublicIp

  SSHCommand:
    Description: SSH command to connect
    Value: !Sub ssh -i /path/to/${KeyName}.pem ubuntu@${MigrationInstance.PublicIp}

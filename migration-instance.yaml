
AWSTemplateFormatVersion: '2010-09-09'
Description: Provision an EC2 instance for the Migration project with Python and Git pre-configured.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Stack Configuration"
        Parameters:
          - StackName
      - Label:
          default: "Network Configuration"
        Parameters:
          - VpcId
          - SubnetId
          - DefaultSecurityGroupId
          - MyIP
      - Label:
          default: "Instance Configuration"
        Parameters:
          - KeyName
          - InstanceType
          - AmiId

Parameters:
  StackName:
    Type: String
    Default: Redis-Migration-Tool
    Description: >
      Name for this CloudFormation stack.
      📍 This will be used as the stack identifier in AWS Console
    MinLength: 1
    MaxLength: 128
    AllowedPattern: "^[a-zA-Z][-a-zA-Z0-9]*$"
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters and hyphens

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: >
      Name of an existing EC2 Key Pair.
      📍 AWS Console > EC2 > Network & Security > Key Pairs.

  MyIP:
    Type: String
    Description: >
      Your public IP address in CIDR format (e.g., 203.0.113.42/32).
      📍 https://checkip.amazonaws.com
    AllowedPattern: "^([0-9]{1,3}\\.){3}[0-9]{1,3}/32$"
    ConstraintDescription: Must be a valid IPv4 address with /32 CIDR mask

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: >
      The VPC ID where the instance and security group will be deployed.
      📍 AWS Console > VPC > Your VPCs

  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: >
      The Subnet ID where the instance will be launched.
      📍 AWS Console > VPC > Subnets (must belong to the above VPC)
      ⚠️  IMPORTANT: Must be a PUBLIC subnet with "Auto-assign public IPv4 address" ENABLED
      📍 To enable: Select subnet > Actions > Modify auto-assign IP settings > Enable

  AmiId:
    Type: AWS::EC2::Image::Id
    Default: ami-042b4708b1d05f512
    Description: >
      Ubuntu AMI ID to use (Ubuntu 22.04 LTS).
      📍 Default: ami-042b4708b1d05f512 (Ubuntu 22.04 LTS in us-east-1)
      📍 AWS Console > EC2 > AMIs (filter by Canonical + Ubuntu)

  DefaultSecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: >
      The default security group ID of the VPC.
      📍 AWS Console > VPC > Security Groups (Group Name: 'default' for your VPC)

  InstanceType:
    Type: String
    Default: t3.micro
    Description: >
      EC2 instance type for the migration instance.
      📍 t3.micro is free tier eligible
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
    ConstraintDescription: Must be a valid EC2 instance type

Resources:
  MigrationInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: CloudFormationSignaling
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:SignalResource
                  - ec2:DescribeTags
                Resource: '*'

  MigrationInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref MigrationInstanceRole

  MigrationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH from MyIP
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref MyIP

  MigrationInstance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT15M
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      ImageId: !Ref AmiId
      SubnetId: !Ref SubnetId
      IamInstanceProfile: !Ref MigrationInstanceProfile
      SecurityGroupIds:
        - !Ref MigrationSecurityGroup
        - !Ref DefaultSecurityGroupId
      Tags:
        - Key: Name
          Value: !Sub "${StackName}-Instance"
        - Key: Project
          Value: !Ref StackName
        - Key: Environment
          Value: Development
      UserData:
        Fn::Base64: |
          #!/bin/bash
          set -e  # Exit on any error

          # Update system
          apt update -y
          apt upgrade -y

          # Install required packages
          apt install -y software-properties-common
          add-apt-repository universe -y
          apt update -y
          apt install -y python3 python3-pip python3-venv git curl wget

          # Install CloudFormation helper scripts
          apt install -y python3-pip
          pip3 install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz

          # Create symbolic link for cfn-signal
          ln -sf /usr/local/bin/cfn-signal /usr/bin/cfn-signal || true

          # Clone and setup Migration project
          cd /home/ubuntu
          git clone https://github.com/AdarBahar/Migration.git
          cd Migration

          # Setup Python environment
          python3 -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt

          # Install AWS CLI for easier AWS management
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install
          rm -rf aws awscliv2.zip

          # Set proper ownership
          chown -R ubuntu:ubuntu /home/ubuntu/Migration

          # Create a startup script for convenience
          cat > /home/ubuntu/start-migration.sh << 'EOF'
          #!/bin/bash
          cd /home/ubuntu/Migration
          echo "🚀 Migration environment ready!"
          echo "Available scripts:"
          echo "  • DB_compare.py - Compare Redis databases"
          echo "  • ReadWriteOps.py - Performance testing"
          echo "  • flushDBData.py - Database cleanup"
          echo "  • manage_env.py - Environment configuration"
          echo "  • DataFaker.py - Generate test data"
          echo "  • provision_elasticache.py - Create ElastiCache instances"
          echo "  • cleanup_elasticache.py - Remove ElastiCache resources"
          echo ""
          echo "💡 To activate the virtual environment, run:"
          echo "   source activate-migration"
          echo ""
          echo "🔄 Or manually:"
          echo "   cd /home/ubuntu/Migration && source venv/bin/activate"
          EOF
          chmod +x /home/ubuntu/start-migration.sh
          chown ubuntu:ubuntu /home/ubuntu/start-migration.sh

          # Create a proper activation script (not just an alias)
          cat > /home/ubuntu/activate-migration << 'EOF'
          #!/bin/bash
          # This script should be sourced, not executed
          if [[ "$${BASH_SOURCE[0]}" == "$${0}" ]]; then
              echo "⚠️  This script should be sourced, not executed directly."
              echo "💡 Run: source activate-migration"
              exit 1
          fi

          cd /home/ubuntu/Migration
          source venv/bin/activate
          echo "✅ Virtual environment activated!"
          echo "📍 Current directory: $$(pwd)"
          echo "🐍 Python: $$(which python)"
          EOF
          chmod +x /home/ubuntu/activate-migration
          chown ubuntu:ubuntu /home/ubuntu/activate-migration

          # Add the activation script to PATH and create alias
          echo 'export PATH="/home/ubuntu:$$PATH"' >> /home/ubuntu/.bashrc
          echo 'alias activate-migration="source /home/ubuntu/activate-migration"' >> /home/ubuntu/.bashrc

          # Also create a direct activation command
          cat > /home/ubuntu/migration << 'EOF'
          #!/bin/bash
          cd /home/ubuntu/Migration
          source venv/bin/activate
          exec bash --rcfile <(echo "PS1='(migration) \\u@\\h:\\w\\$$ '")
          EOF
          chmod +x /home/ubuntu/migration
          chown ubuntu:ubuntu /home/ubuntu/migration

          chown ubuntu:ubuntu /home/ubuntu/.bashrc

          # All installation completed successfully!
          echo "✅ All installation completed successfully!"
          echo "🎉 Migration environment is ready for use!"

          # Signal CloudFormation that setup is complete
          echo "🔄 Starting CloudFormation signaling process..."

          # Get instance metadata for signaling
          echo "📍 Getting instance metadata..."
          INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id 2>/dev/null || echo "unknown")
          REGION=$(curl -s http://169.254.169.254/latest/meta-data/placement/region 2>/dev/null || echo "us-east-1")

          echo "📍 Instance ID: $INSTANCE_ID"
          echo "📍 Region: $REGION"

          # Check if cfn-signal is available
          if command -v cfn-signal >/dev/null 2>&1; then
              echo "✅ cfn-signal found"

              # Wait a moment for tags to be available
              sleep 10

              # Try to get stack name from tags
              echo "🔍 Looking for stack name in instance tags..."
              STACK_NAME=$(aws ec2 describe-tags --region $REGION --filters "Name=resource-id,Values=$INSTANCE_ID" "Name=key,Values=aws:cloudformation:stack-name" --query 'Tags[0].Value' --output text 2>/dev/null || echo "unknown")

              echo "📍 Stack name: $STACK_NAME"

              if [ "$STACK_NAME" != "unknown" ] && [ "$STACK_NAME" != "None" ] && [ "$STACK_NAME" != "null" ]; then
                  echo "🚀 Sending CloudFormation signal..."
                  cfn-signal -e 0 --stack "$STACK_NAME" --resource MigrationInstance --region "$REGION"
                  SIGNAL_RESULT=$?
                  if [ $SIGNAL_RESULT -eq 0 ]; then
                      echo "✅ CloudFormation signal sent successfully!"
                  else
                      echo "❌ CloudFormation signal failed with exit code: $SIGNAL_RESULT"
                  fi
              else
                  echo "⚠️  Could not determine stack name for signaling"
                  echo "🔍 Available tags:"
                  aws ec2 describe-tags --region $REGION --filters "Name=resource-id,Values=$INSTANCE_ID" --output table 2>/dev/null || echo "Failed to get tags"
              fi
          else
              echo "❌ cfn-signal not available"
              echo "🔍 Checking PATH: $PATH"
              echo "🔍 Looking for cfn-signal:"
              find /usr -name "cfn-signal" 2>/dev/null || echo "cfn-signal not found"
          fi

          echo "🎯 Setup completed at $(date)"
          echo "📝 Check /var/log/cloud-init-output.log for full installation log"

Outputs:
  InstancePublicIP:
    Description: Public IP of the EC2 instance
    Value: !GetAtt MigrationInstance.PublicIp

  SSHCommand:
    Description: SSH command to connect
    Value: !Sub
      - ssh -i /path/to/${KeyName}.pem ubuntu@${PublicIp}
      - KeyName: !Ref KeyName
        PublicIp: !GetAtt MigrationInstance.PublicIp
